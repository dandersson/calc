#!/usr/bin/env python3
import code
import readline
import rlcompleter
import sys

# Import common math functions into default namespace.
from math import *


def main():
    # Define some common constants.
    c  = 299792458           # Speed of light in a vacuum, c  [m/s]
    g  = 9.82                # Gravitational acceleration, g  [m/s²]
    e0 = 8.854187817620e-12  # Vacuum permittivity, ε₀        [F/m]
    m0 = pi*4e-7             # Vacuum permeability, μ₀        [Vs/Am]
    Z0 = sqrt(m0/e0)         # Vacuum impedance, Z₀           [Ω]
    ke = 1/4/pi/e0           # Coulomb constant, kₑ           [m/F]
    me = 9.10938291e-31      # Electron mass, mₑ              [kg]
    mp = 1.672621777e-27     # Proton mass, mₚ                [kg]
    ec = 1.602176565e-19     # Fundamental charge, e          [C]
    NA = 6.02214129e23       # Avogadro constant, N_A         [mol⁻¹]
    kB = 1.3806488e-23       # Boltzmann constant, k_B        [J/K]

    # Alias log() (the natural logarithm) to ln().
    ln = log

    # Modules are loaded only upon function invocation below to keep general
    # startup time fast.

    # Compute best fractional approximation.
    def frac(num, limit=10**6):
        from fractions import Fraction
        return Fraction(num).limit_denominator(limit)

    # 2-norm function for vectors. Note that it handles both an adaptive number
    # of direct arguments and list/tuple input.
    def norm(*args):
        import numpy.linalg as npl
        return npl.norm(args)

    # Handle when given an expression on the command line.
    if len(sys.argv) > 1:
        expression = ''.join(sys.argv[1:])
        print('{} = {}'.format(expression, eval(expression)))
    # Handle a pipe.
    elif not sys.stdin.isatty():
        for expression in sys.stdin:
            print('{} = {}'.format(expression.strip(), eval(expression)))
    # Run interactively.
    else:
        # Import variables into interactive session.
        vars = globals().copy()
        vars.update(locals())
        # Enable tab completion of variables and functions.
        readline.set_completer(rlcompleter.Completer(vars).complete)
        readline.parse_and_bind('tab: complete')
        shell = code.InteractiveConsole(vars)
        shell.interact('')


if __name__ == '__main__':
    main()
