#!/usr/bin/env python3

# Upstream: <https://github.com/dandersson/calc
# License:  GPL v2 or later <http://www.gnu.org/licenses/gpl-2.0.html>

import code
import readline
import rlcompleter
import sys

# Import common math functions into default namespace.
from math import *

from textwrap import indent, dedent

def main():
    function_doc = {}

    def calc_function(function):
        """Decorator to dynamically add function documentation."""
        function_doc[function.__name__] = function.__doc__
        return function

    # Define some common constants.
    constants = dedent('''\
        c  = 299792458           # Speed of light in a vacuum, c  [m/s]
        g  = 9.82                # Gravitational acceleration, g  [m/s²]
        e0 = 8.854187817620e-12  # Vacuum permittivity, ε₀        [F/m]
        m0 = pi*4e-7             # Vacuum permeability, μ₀        [Vs/Am]
        Z0 = sqrt(m0/e0)         # Vacuum impedance, Z₀           [Ω]
        ke = 1/4/pi/e0           # Coulomb constant, kₑ           [m/F]
        me = 9.10938291e-31      # Electron mass, mₑ              [kg]
        mp = 1.672621777e-27     # Proton mass, mₚ                [kg]
        ec = 1.602176565e-19     # Fundamental charge, e          [C]
        NA = 6.02214129e23       # Avogadro constant, N_A         [mol⁻¹]
        kB = 1.3806488e-23       # Boltzmann constant, k_B        [J/K]
        '''.rstrip())
    exec(constants)

    function_doc['ln'] = '''
    Return natural logarithm of argument.

    Alias of `math.log`.
    '''
    ln = log

    # Modules are loaded only upon function invocation below to keep general
    # startup time fast.

    @calc_function
    def frac(num, limit=10**6):
        """
        Compute best fractional approximation of argument. Optionally take a
        second (integer) argument with limits the size of the denominator.

        Alias of `fractions.Fraction` with denominator limit at 10⁶.
        """
        from fractions import Fraction
        return Fraction(num).limit_denominator(limit)

    @calc_function
    def norm(*args):
        """
        2-norm function for vectors. Handles both an adaptive number of direct
        arguments and list/tuple input.

        Alias of `numpy.linalg.norm`
        """
        import numpy.linalg as npl
        return npl.norm(args)

    # Handle when given an expression on the command line.
    if len(sys.argv) > 1:
        expression = ''.join(sys.argv[1:])
        print('{} = {}'.format(expression, eval(expression)))
    # Handle a pipe.
    elif not sys.stdin.isatty():
        for expression in sys.stdin:
            print('{} = {}'.format(expression.strip(), eval(expression)))
    # Run interactively.
    else:
        def help_calc():
            print(dedent('''\
            This calculator imports the `math` module namespace into its own
            and defines additional constants and aliases.

            For information on constants, run `help_constants()`.

            For information on additional functions, run `help_functions()`.

            For information on the `math` module, run `help_math()` or see
            <https://docs.python.org/3/library/math.html>.
            '''.rstrip()))

        def help_math():
            import math
            help(math)

        def help_constants():
            print(constants)

        def help_functions():
            def indent(string):
                return '\n'.join(['  ' + line for line in string.splitlines()])
            print('\n\n'.join([
                '{}:\n{}'.format(function, indent(dedent(docstring).strip()))
                for (function, docstring)
                in function_doc.items()
            ]))

        # Import variables into interactive session.
        variables = globals().copy()
        variables.update(locals())
        # Enable tab completion of variables and functions.
        readline.set_completer(rlcompleter.Completer(variables).complete)
        readline.parse_and_bind('tab: complete')
        shell = code.InteractiveConsole(variables)
        shell.interact('\033[1;32mMinimal Python calculator \033[0;30m'
            '(`help_calc()` for instructions)\033[0m')


if __name__ == '__main__':
    main()
